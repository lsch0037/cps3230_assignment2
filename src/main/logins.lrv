GLOBAL {
	VARIABLES {
		boolean isLoggedIn = false;
	}
	
	EVENTS {
		badLogin() = {RunnerLogins.badLogin()}
		goodLogin() = {RunnerLogins.goodLogin()}
		logout() = {RunnerLogins.logout()}
		loginCheck() = {RunnerLogins.loginCheck()}
	}
	
	PROPERTY logins{
		STATES {
			BAD {
				doubleLogin
				doubleLogout		
				incorrectLoginState
			}
			NORMAL {
				loggedIn
			}
			STARTING{
				loggedOut
			}
		}
		
		TRANSITIONS {
			loggedOut -> loggedOut [badLogin()\\System.out.println("Unsuccessful Login attempt.");]
			loggedOut -> loggedIn [goodLogin()\\isLoggedIn = true; System.out.println("Successfully Logged In.");]
			loggedOut -> doubleLogout [logout()\\System.out.println("ERROR DOUBLE LOGOUT");]
			loggedOut -> incorrectLoginState [loginCheck()\ isLoggedIn\ System.out.println("ERROR INVALID LOGIN STATE (LoggedIn)");]
			loggedOut -> loggedOut [loginCheck()\ !isLoggedIn \ System.out.println("Valid Login State (LoggedOut)");]
			
			loggedIn -> doubleLogin [goodLogin()\\System.out.println("ERROR DOUBLE LOGIN");]
			loggedIn -> doubleLogin [badLogin()\\System.out.println("ERROR DOUBLE LOGIN");]
			loggedIn -> loggedOut [logout()\\isLoggedIn = false; System.out.println("Successfully Logged Out");]
			loggedIn -> incorrectLoginState [loginCheck()\ !isLoggedIn\ System.out.println("ERROR INVALID LOGIN STATE (LoggedOut)");]
			loggedIn -> loggedIn [loginCheck()\ isLoggedIn \ System.out.println("Valid Login State (LoggedIn)");]
		}
	}
}